generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------------------
// Enums
// ---------------------------
enum UserRole {
  ADMIN
  MANAGER
  SERVEUR
  CUISINIER
  CAISSIER
}

enum TableStatus {
  LIBRE
  OCCUPEE
  RESERVEE
  A_NETTOYER
}

enum OrderStatus {
  EN_ATTENTE
  EN_PREPARATION
  PRETE
  SERVIE
  ANNULEE
}

enum PaymentMethod {
  ESPECES
  CARTE_BANCAIRE
  CHEQUE
  TICKET_RESTAURANT
  MOBILE
}

enum PaymentStatus {
  EN_ATTENTE
  VALIDEE
  ECHOUEE
  REMBOURSEE
}

enum ReservationStatus {
  EN_ATTENTE
  CONFIRMEE
  ANNULEE
  TERMINEE
  NO_SHOW
}

// ---------------------------
// Models
// ---------------------------

model User {
  id           String    @id @default(cuid())
  email        String    @unique
  passwordHash String?
  firstName    String?
  lastName     String?
  phone        String?   @unique
  role         UserRole  @default(SERVEUR)
  isActive     Boolean   @default(true)
  profileImage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // relations
  staff          Staff[]
  loyalty        LoyaltyAccount?
  orders         Order[]
  stockMovements StockMovement[]
  sessions       Session[]

  @@index([email])
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Restaurant {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  address   String?
  city      String?
  country   String?
  timezone  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tables     Table[]
  orders     Order[]
  categories Category[]
  products   Product[]
  staff      Staff[]
  inventory  InventoryItem[]
}

model Table {
  id        String      @id @default(cuid())
  restaurantId String
  number    Int?        @unique
  name      String?
  capacity  Int
  status    TableStatus @default(LIBRE)
  positionX Float?      @default(0)
  positionY Float?      @default(0)
  section   String?
  qrCode    String?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orders     Order[]
  reservations Reservation[]
}

model Category {
  id        String   @id @default(cuid())
  restaurantId String
  name      String
  description String?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  products  Product[]
}

model Product {
  id          String   @id @default(cuid())
  restaurantId String
  categoryId  String?
  name        String
  description String?
  price       Float
  imageUrl    String?
  isAvailable Boolean  @default(true)
  allergens   String?
  preparationTime Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  category   Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  orderItems OrderItem[]

  @@index([categoryId])
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String?     @unique
  restaurantId String
  tableId     String?
  userId      String?
  status      OrderStatus @default(EN_ATTENTE)
  totalAmount Float       @default(0)
  taxAmount   Float?      @default(0)
  discount    Float       @default(0)
  tip         Float       @default(0)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  servedAt    DateTime?

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  table      Table?      @relation(fields: [tableId], references: [id], onDelete: SetNull)
  user       User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  items      OrderItem[]
  payments   Payment[]

  @@index([tableId])
  @@index([userId])
  @@index([status])
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  unitPrice Float
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  method        PaymentMethod
  status        PaymentStatus @default(EN_ATTENTE)
  amount        Float
  transactionId String?
  receiptUrl    String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
}

model Reservation {
  id            String            @id @default(cuid())
  tableId       String
  customerName  String
  customerPhone String
  customerEmail String?
  date          DateTime
  time          String
  guests        Int
  status        ReservationStatus @default(EN_ATTENTE)
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  table Table @relation(fields: [tableId], references: [id], onDelete: Cascade)

  @@index([tableId])
  @@index([date])
}

model InventoryItem {
  id           String   @id @default(cuid())
  restaurantId String
  name         String
  quantity     Float
  unit         String
  minThreshold Float
  costPerUnit  Float
  supplierId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  supplier   Supplier?  @relation(fields: [supplierId], references: [id], onDelete: SetNull)
  movements   StockMovement[]
}

model StockMovement {
  id              String        @id @default(cuid())
  inventoryItemId String
  type            String
  quantity        Float
  reason          String?
  userId          String?
  createdAt       DateTime      @default(now())

  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)
  user          User?         @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([inventoryItemId])
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  inventoryItems InventoryItem[]
}

model Staff {
  id           String   @id @default(cuid())
  userId       String
  restaurantId String
  role         String
  createdAt    DateTime @default(now())

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model LoyaltyAccount {
  id        String  @id @default(cuid())
  userId    String  @unique
  points    Int     @default(0)
  tier      String?
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

